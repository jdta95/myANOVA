my_anova(modcm)
mods = list(modcm)
length(mods) == 1 & (any(grepl(" - 1", mods[[1]]$call)) | any(grepl(" + 0", mods[[1]]$call)))
modcm$call
modcm = lm(Sepal.Length ~ - 1 + Species,
data = iris)
modcm$call
devtools::install_github("jdta95/myANOVA")
devtools::test()
usethis::use_github_actions()
?usethis::use_github_action
usethis::use_github_action()
usethis::use_github_action()
devtools::install_github("jdta95/myANOVA")
?myANOVA::my_anova
roxygen2::roxygenise()
data(iris)
mod1 = lm(Sepal.Length ~ Sepal.Width, data = iris)
mod2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
my_anova2(list(mod1, mod2))
myANOVA::my_anova2(list(mod1,mod2))
roxygen2::roxygenise()
data(iris)
mod1 = lm(Sepal.Length ~ Sepal.Width, data = iris)
mod2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
mods = list(mod1, mod2)
my_anova2(mods)
usethis::use_coverage()
use_github_action("test-coverage")
usethis::use_github_action("test-coverage")
data(iris)
data(iris)
mod1b = lm(Sepal.Length ~ -1 + Species,
data = iris)
mod2b = lm(Sepal.Length ~ -1 + Species + Sepal.Width,
data = iris)
anova(mod1b)
sum(iris$Sepal.Length ^ 2)
sum(iris$Sepal.Length ^ 2) - 39
View(iris)
anova(mod2b)
summary(iris$Sepal.Length)
sd(iris$Sepal.Length)
var(iris$Sepal.Length)
data(iris)
mod1 = lm(Sepal.Length ~ Sepal.Width, data = iris)
mod2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data = iris)
mods = list(mod1, mod2)
my_anova2(mods)
myANOVA::my_anova2(mod)
myANOVA::my_anova2(mods)
is.character(as.character(1:5))
is.character(as.factor(1:5))
is.factor(as.factor(1:5))
?anova
?lm
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(myANOVA)
# Load a dataset
data(iris)
# Create a linear model
mod = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(mod)
# Load the dataset
data(iris)
# Create nested linear models
mod1 = lm(Sepal.Length ~ Sepal.Width,
data = iris)
mod2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
data = iris)
my_anova(mod1, mod2)
mod3 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(mod1, mod2, mod3)
mod
mod1
mod3
all.equal(my_anova(mod1), anova(mod1))
all.equal(my_anova(mod2), anova(mod2))
all.equal(my_anova(mod3), anova(mod3))
all.equal(my_anova(mod1, mod2), anova(mod1, mod2))
all.equal(my_anova(mod2, mod3), anova(mod2, mod3))
all.equal(my_anova(mod1, mod3), anova(mod1, mod3))
all.equal(my_anova(mod1, mod2, mod3), anova(mod1, mod2, mod3))
bench::mark(my_anova(mod1), anova(mod1))
bench::mark(my_anova(mod2), anova(mod2))
bench::mark(my_anova(mod3), anova(mod3))
bench::mark(my_anova(mod1, mod2), anova(mod1, mod2))
bench::mark(my_anova(mod2, mod3), anova(mod2, mod3))
bench::mark(my_anova(mod1, mod3), anova(mod1, mod3))
bench::mark(my_anova(mod1, mod2, mod3), anova(mod1, mod2, mod3))
roxygen2::roxygenise()
?myANOVA::my_anova
?myANOVA::my_anova
devtools::build_vignettes()
browseVignettes()
?browseVignettes
browseVignettes("myANOVA")
devtools::build_vignettes()
usethis::use_coverage()
usethis::use_github_action("test-coverage")
mod = lm(Sepal.Length ~ Species, data = iris)
mod
mod = lm(Sepal.Length ~ -1 + Species, data = iris)
mod
anova(mod)
sum(iris$Sepal.Length ^ 2)
sum(mean(iris$Sepal.Length) ^ 2)
sum((iris$Sepal.Length - mean(iris$Sepal.Length)) ^ 2)
mean(iris$Sepal.Length) ^ 2
usethis::use_coverage()
usethis::use_github_action("test-coverage")
?usethis::use_github_action()
my_anova1_nocoeffs = function(mod) {
# degrees of freedom (df) = n
dfs = nrow(mod$model)
# sum of squares (SS) = sum(Y ^ 2)
SSs = sum(mod$model[, 1] ^ 2)
# mean sum of squares (MSS) = SS / df
MSSs = SSs / dfs
# No hypothesis testing
Fs = NA * 0
ps = NA * 0
# Create output
ret = list(
Df = dfs,
`Sum Sq` = SSs,
`Mean Sq` = MSSs,
`F value` = Fs,
`Pr(>F)` = ps
)
attributes(ret)$row.names = "Residuals"
attributes(ret)$class = c("anova", "data.frame")
attributes(ret)$heading = c("Analysis of Variance Table\n",
paste0("Response: ", names(mod$model), collapse = ""))
return(ret)
}
my_anova1_nointercept = function(mod) {
par = ncol(mod$model) - 1
# sum(Y ^ 2)
Ysumsquare = sum(mod$model[, 1] ^ 2)
# Use get_dfs on each covariate to get the degrees of freedom (df)
dfs = unname(c(sapply(mod$model[, -1, drop = FALSE], get_dfs), mod$df.residual))
if (par > 1 | dfs[1] > 1) {
index = min(which(sapply(mod$model[, -1, drop = FALSE],
function(col) {
class(col) == "factor" | class(col) == "character"
})))
dfs[index] = dfs[index] + 1
}
# Calculate the sums of squares (SS) for each sequential model
## SS = sum(Y ^ 2) - sum((Y - Yhat) ^ 2) - (previous SS's)
SSs = numeric(par + 1)
for (i in 1:par) {
formula_str = paste0("mod$model[, 1] ~ - 1 + ",
paste0("mod$model[, ", 2:(i + 1), collapse = "] + "),
"]")
SSs[i] = Ysumsquare - sum((lm(as.formula(formula_str))$residuals) ^ 2) - sum(SSs)
}
SSs[i + 1] = sum(mod$residuals ^ 2)
# Calculate mean sums of squares
## MSS = SS / df
MSSs = SSs / dfs
# Calculate F-statistics
## model MSS / residuals MSS
Fs = c(MSSs[-length(MSSs)] / MSSs[length(MSSs)], NA)
# Calculate p-values
## p = pf(F, model df, residual df)
ps = pf(Fs, dfs[-length(dfs)], dfs[length(dfs)], lower.tail = FALSE)
# Create output
ret = list(
Df = dfs,
`Sum Sq` = SSs,
`Mean Sq` = MSSs,
`F value` = Fs,
`Pr(>F)` = ps
)
model_names = names(mod$model)
attributes(ret)$row.names = c(model_names[2:(par + 1)],
"Residuals")
attributes(ret)$class = c("anova", "data.frame")
attributes(ret)$heading = c("Analysis of Variance Table\n",
paste0("Response: ", model_names[1], collapse = ""))
return(ret)
}
my_anova = function(...) {
mods = list(...)
# Error if any mods are not lm objects
if (any(sapply(mods, function(mod)
class(mod) != "lm"))) {
stop("At least one of the objects supplied to my_anova does not have class \"lm\".")
}
# If mods contains multiple models, run my_anova2
else if (length(mods) > 1) {
return(my_anova2(mods))
}
# If mods contains just one no-coefficient model, run my_anova1_nocoeffs
else if (ncol(mods[[1]]$model == 1)) {
return(my_anova1_nocoeffs(mods[[1]]))
}
# If mods contains just one no-intercept model, run my_anova1_nointercept
else if (length(mods) == 1 &
(any(grepl(" -\\s*1", mods[[1]]$call)) |
any(grepl(" +\\s*0", mods[[1]]$call)))) {
return(my_anova1_nointercept(mods[[1]]))
}
# If mods contains just one intercept-only model, run my_anova_intercept
else if (ncol(mods[[1]]$model) == 1) {
return(my_anova_intercept(mods[[1]]))
}
# If mods contains just one model with at least one covariate, run my_anova1
else {
return(my_anova1(mods[[1]]))
}
}
library(myANOVA)
# Create a no-intercept linear model
modni0 = lm(Sepal.Length ~ -1,
data = iris)
my_anova(modni0)
# Create a no-intercept linear model
modni1 = lm(Sepal.Length ~
-1 + Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(modni1)
my_anova = function(...) {
mods = list(...)
# Error if any mods are not lm objects
if (any(sapply(mods, function(mod)
class(mod) != "lm"))) {
stop("At least one of the objects supplied to my_anova does not have class \"lm\".")
}
# If mods contains multiple models, run my_anova2
else if (length(mods) > 1) {
return(my_anova2(mods))
}
# If mods contains just one no-coefficient model, run my_anova1_nocoeffs
else if (ncol(mods[[1]]$model) == 1) {
return(my_anova1_nocoeffs(mods[[1]]))
}
# If mods contains just one no-intercept model, run my_anova1_nointercept
else if (length(mods) == 1 &
(any(grepl(" -\\s*1", mods[[1]]$call)) |
any(grepl(" +\\s*0", mods[[1]]$call)))) {
return(my_anova1_nointercept(mods[[1]]))
}
# If mods contains just one intercept-only model, run my_anova_intercept
else if (ncol(mods[[1]]$model) == 1) {
return(my_anova_intercept(mods[[1]]))
}
# If mods contains just one model with at least one covariate, run my_anova1
else {
return(my_anova1(mods[[1]]))
}
}
# Create a no-intercept linear model
modni1 = lm(Sepal.Length ~
-1 + Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(modni1)
anova(modni1)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_vignettes()
.Last.error
devtools::build_vignettes()
devtools::install_github("jdta95/myANOVA")
devtools::install_github("jdta95/myANOVA")
browseVignettes()
browseVignettes("myANOVA")
?browseVignettes
browseVignettes(myANOVA)
devtools::build_vignettes()
.Last.error
myANOVA::my_anova
.Last.error
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(myANOVA)
# Load a dataset
data(iris)
# Create a linear model
mod = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(mod)
# Create a no-intercept linear model
modni1 = lm(Sepal.Length ~
-1 + Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(modni1)
# Create a no-intercept linear model
modni0 = lm(Sepal.Length ~ -1,
data = iris)
my_anova(modni0)
# Load the dataset
data(iris)
# Create nested linear models
mod1 = lm(Sepal.Length ~ Sepal.Width,
data = iris)
mod2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
data = iris)
my_anova(mod1, mod2)
mod3 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(mod1, mod2, mod3)
all.equal(my_anova(mod1), anova(mod1))
all.equal(my_anova(mod2), anova(mod2))
all.equal(my_anova(mod3), anova(mod3))
all.equal(my_anova(modni0), anova(modni0))
all.equal(my_anova(modni1), anova(modni1))
all.equal(my_anova(mod1, mod2), anova(mod1, mod2))
all.equal(my_anova(mod2, mod3), anova(mod2, mod3))
all.equal(my_anova(mod1, mod3), anova(mod1, mod3))
all.equal(my_anova(modni0, modni1), anova(modni0, modni1))
all.equal(my_anova(mod1, mod2, mod3), anova(mod1, mod2, mod3))
bench::mark(my_anova(mod1), anova(mod1))
bench::mark(my_anova(mod2), anova(mod2))
bench::mark(my_anova(mod3), anova(mod3))
bench::mark(my_anova(modni0), anova(modni0))
bench::mark(my_anova(modni1), anova(modni1))
bench::mark(my_anova(mod1, mod2), anova(mod1, mod2))
bench::mark(my_anova(mod2, mod3), anova(mod2, mod3))
bench::mark(my_anova(mod1, mod3), anova(mod1, mod3))
bench::mark(my_anova(modni0, modni1), anova(modni0, modni1))
all.equal(my_anova(modni0, modni1), anova(modni0, modni1))
my_anova(modni0, modni1)
anova(modni0, modni1)
"Model 2: Sepal.Length ~ -1 + Sepal.Width + Petal.Length + Petal.Width + Species" == "Model 2: Sepal.Length ~ -1 + Sepal.Width + Petal.Length + Petal.Width + Species"
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(myANOVA)
# Load a dataset
data(iris)
# Create a linear model
mod = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(mod)
# Create a no-intercept linear model
modni1 = lm(Sepal.Length ~ -1 + Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(modni1)
# Create a no-intercept linear model
modni0 = lm(Sepal.Length ~ -1,
data = iris)
my_anova(modni0)
# Load the dataset
data(iris)
# Create nested linear models
mod1 = lm(Sepal.Length ~ Sepal.Width,
data = iris)
mod2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
data = iris)
my_anova(mod1, mod2)
mod3 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(mod1, mod2, mod3)
all.equal(my_anova(mod1), anova(mod1))
all.equal(my_anova(mod2), anova(mod2))
all.equal(my_anova(mod3), anova(mod3))
all.equal(my_anova(modni0), anova(modni0))
all.equal(my_anova(modni1), anova(modni1))
all.equal(my_anova(mod1, mod2), anova(mod1, mod2))
all.equal(my_anova(mod2, mod3), anova(mod2, mod3))
all.equal(my_anova(mod1, mod3), anova(mod1, mod3))
all.equal(my_anova(modni0, modni1), anova(modni0, modni1))
all.equal(my_anova(mod1, mod2, mod3), anova(mod1, mod2, mod3))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(myANOVA)
# Load a dataset
data(iris)
# Create a linear model
mod = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(mod)
# Create a no-intercept linear model
modni1 = lm(Sepal.Length ~ -1 + Sepal.Width + Species,
data = iris)
my_anova(modni1)
# Create a no-intercept linear model
modni0 = lm(Sepal.Length ~ -1,
data = iris)
my_anova(modni0)
# Load the dataset
data(iris)
# Create nested linear models
mod1 = lm(Sepal.Length ~ Sepal.Width,
data = iris)
mod2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
data = iris)
my_anova(mod1, mod2)
mod3 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(mod1, mod2, mod3)
all.equal(my_anova(mod1), anova(mod1))
all.equal(my_anova(mod2), anova(mod2))
all.equal(my_anova(mod3), anova(mod3))
all.equal(my_anova(modni0), anova(modni0))
all.equal(my_anova(modni1), anova(modni1))
all.equal(my_anova(mod1, mod2), anova(mod1, mod2))
all.equal(my_anova(mod2, mod3), anova(mod2, mod3))
all.equal(my_anova(mod1, mod3), anova(mod1, mod3))
all.equal(my_anova(modni0, modni1), anova(modni0, modni1))
all.equal(my_anova(mod1, mod2, mod3), anova(mod1, mod2, mod3))
bench::mark(my_anova(mod1), anova(mod1))
bench::mark(my_anova(mod2), anova(mod2))
bench::mark(my_anova(mod3), anova(mod3))
bench::mark(my_anova(modni0), anova(modni0))
bench::mark(my_anova(modni1), anova(modni1))
bench::mark(my_anova(mod1, mod2), anova(mod1, mod2))
bench::mark(my_anova(mod2, mod3), anova(mod2, mod3))
bench::mark(my_anova(mod1, mod3), anova(mod1, mod3))
bench::mark(my_anova(modni0, modni1), anova(modni0, modni1))
bench::mark(my_anova(mod1, mod2, mod3), anova(mod1, mod2, mod3))
devtools::build_vignettes()
devtools::install_github("jdta95/myANOVA")
browseVignettes("myANOVA")
devtools::build_vignettes()
devtools::test()
devtools::test()
roxygen2::roxygenise()
devtools::build_vignettes()
devtools::install_github("jdta95/myANOVA")
browseVignettes("myANOVA")
browseVignettes("myANOVA")
browseVignettes(myANOVA)
devtools::install_github("jdta95/myANOVA")
browseVignettes(myANOVA)
browseVignettes("myANOVA")
devtools::build_vignettes()
browseVignettes("myANOVA")
browseVignettes()
devtools::build_vignettes()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(myANOVA)
# Load a dataset
data(iris)
# Create a linear model
mod = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(mod)
# Create a no-intercept linear model
modni1 = lm(Sepal.Length ~ -1 + Sepal.Width + Species,
data = iris)
my_anova(modni1)
# Create a no-intercept linear model
modni0 = lm(Sepal.Length ~ -1,
data = iris)
my_anova(modni0)
# Load the dataset
data(iris)
# Create nested linear models
mod1 = lm(Sepal.Length ~ Sepal.Width,
data = iris)
mod2 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width,
data = iris)
my_anova(mod1, mod2)
mod3 = lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width + Species,
data = iris)
my_anova(mod1, mod2, mod3)
all.equal(my_anova(mod1), anova(mod1))
all.equal(my_anova(mod2), anova(mod2))
all.equal(my_anova(mod3), anova(mod3))
all.equal(my_anova(modni0), anova(modni0))
all.equal(my_anova(modni1), anova(modni1))
all.equal(my_anova(mod1, mod2), anova(mod1, mod2))
all.equal(my_anova(mod2, mod3), anova(mod2, mod3))
all.equal(my_anova(mod1, mod3), anova(mod1, mod3))
all.equal(my_anova(modni0, modni1), anova(modni0, modni1))
all.equal(my_anova(mod1, mod2, mod3), anova(mod1, mod2, mod3))
bench::mark(my_anova(mod1), anova(mod1))
bench::mark(my_anova(mod2), anova(mod2))
bench::mark(my_anova(mod3), anova(mod3))
bench::mark(my_anova(modni0), anova(modni0))
bench::mark(my_anova(modni1), anova(modni1))
bench::mark(my_anova(mod1, mod2), anova(mod1, mod2))
bench::mark(my_anova(mod2, mod3), anova(mod2, mod3))
bench::mark(my_anova(mod1, mod3), anova(mod1, mod3))
bench::mark(my_anova(modni0, modni1), anova(modni0, modni1))
bench::mark(my_anova(mod1, mod2, mod3), anova(mod1, mod2, mod3))
browseVignettes("myANOVA")
devtools::build_vignettes()
devtools::install_github("jdta95/myANOVA", build_vignettes = TRUE)
browseVignettes("myANOVA")
devtools::install_github("jdta95/myANOVA", build_vignettes = TRUE)
browseVignettes("myANOVA")
devtools::build_vignettes()
devtools::install_github("jdta95/myANOVA", build_vignettes = TRUE)
browseVignettes("myANOVA")
devtools::build_vignettes()
devtools::install_github("jdta95/myANOVA", build_vignettes = TRUE)
browseVignettes("myANOVA")
my_anova(lm(Sepal.Length ~ Sepal.Width + Species, data = iris))
myANOVA::my_anova(lm(Sepal.Length ~ Sepal.Width + Species, data = iris))
myANOVA::my_anova(lm(Sepal.Length ~ -1 + Sepal.Width + Species, data = iris))
myANOVA::my_anova(lm(Sepal.Length ~ -1, data = iris))
myANOVA::my_anova(lm(Sepal.Length ~ 1, data = iris))
myANOVA::my_anova(lm(Sepal.Length ~, data = iris))
anova(lm(Sepal.Length ~, data = iris))
